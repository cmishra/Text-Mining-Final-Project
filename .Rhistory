source("SYS 3060/Assign 2/methods.R")
source("SYS 3060/Assign 2/methods.R")
source("SYS 3060/Assign 2/methods.R")
source("SYS 3060/Assign 2/methods.R")
valE <- seq(from=6, to=10, by=0.001)
expGrph <- data.table(
Value=valE,
"f1"=dexp(valE-6, 1/0.8),
"f0"=dexp(valE-6, 1/0.2))
expGrph <- gather(expGrph, Function, Likelihood, f1, f0)
ggplot(expGrph, aes(x=Value, y=Likelihood, color=Function)) +
geom_line() +
xlab("Value") +
ylab("Likelihood") +
scale_color_manual(
labels=c("f_1(x)", "f_0(x)"),
values=c("#ff0000", "#0000ff"))
valE <- seq(from=6, to=9, by=0.001)
post <- data.table(
x=valE,
y=Posterior1.2(valE)
)
ggplot(post, aes(x, y)) +
geom_line() +
xlab("x") +
ylab("p(W=1)")
valP <- seq(0, 50, by=0.01)
pGrph <- data.table(
Value = valP,
ratio = powerPDF(50-valP, 41/9, 50, 0)/powerPDF(valP, 37/13, 50, 0)
)
ggplot(pGrph, aes(x=Value, y=ratio)) +
geom_line() +
xlab("Departure") +
ylab("Likelihood Ratio") +
scale_y_log10()
library(neuralnet)
library(nnet)
dat <-read.csv("../SYS 6016/15_02_26 Class Exercise/concrete.csv")
m <- neuralnet(strength ~ cement + slag + ash + water + superplastic +
coarseagg + fineagg + age, data=dat, hidden=5)
m2 <- nnet(strength ~ ., data=datTrn, size=5)
m2 <- nnet(strength ~ ., data=dat, size=5)
p <- compute(m, dat[,-9])
m2 <- nnet(strength ~ ., data=dat, size=5)
normalize <- function(x) {
(x-min(x))/(max(x)-min(x))
}
lapply(dat, normalize)
dat <- lapply(dat, normalize)
m <- neuralnet(strength ~ cement + slag + ash + water + superplastic +
coarseagg + fineagg + age, data=dat, hidden=5)
m2 <- nnet(strength ~ ., data=dat, size=5)
p <- compute(m, dat[,-9])
head(dat)
dat <- data.frame(lapply(dat, normalize))
head(dat)
m <- neuralnet(strength ~ cement + slag + ash + water + superplastic +
coarseagg + fineagg + age, data=dat, hidden=5)
m2 <- nnet(strength ~ ., data=dat, size=5)
p <- compute(m, dat[,-9])
p2 <- predict(m2, dat[,-9])
head(p$net.result)
head(p2)
dat <-read.csv("../SYS 6016/15_02_26 Class Exercise/concrete.csv")
dat <- dat[sample(1:nrow(dat), nrow(dat)),] #reorder randomly
dat <- data.frame(lapply(dat, normalize))
trningIndex <- sample(1:nrow(dat), round(0.75*nrow(dat))) #isolate training indexes
datTrn <- dat[trningIndex,]
datTst <-dat[-trningIndex,]
m <- neuralnet(strength ~ cement + slag + ash + water + superplastic +
coarseagg + fineagg + age, data=datTrn, hidden=5)
m2 <- nnet(strength ~ ., data=datTrn, size=5)
?nnet
p <- compute(m, datTrn[,-9])
p2 <- predict(m2, datTrn[,-9])
p <- compute(m, datTst[,-9])
p2 <- predict(m2, datTst[,-9])
cor(p$net.result, datTst[,9])
cor(p2, datTst[,9])
m <- neuralnet(strength ~ cement + slag + ash + water + superplastic +
coarseagg + fineagg + age, data=datTrn, hidden=1)
m2 <- nnet(strength ~ ., data=datTrn, size=1)
p <- compute(m, datTst[,-9])
# cor(datTst$strength, p$net.result)
p2 <- predict(m2, datTst[,-9])
cor(p$net.result, datTst[,9])
cor(p2, datTst[,9])
str
str(read.csv(dfPath))
str(read.csv(dfPath))
getwd()
str(read.csv(dfPath, header=F))
str(read.csv(dfPath, header=F))
dfPath <- "Suggie Request/mp4Excel.csv"
str(read.csv(dfPath, header=F))
dfPath <- "Suggie  Request/mp4Excel.csv"
str(read.csv(dfPath, header=F))
?read.table
?scale_x_log
?scale
?scale_x_log10
library(ggplot2)
?scale_x_log10
?geom_point
gen_req <- function(x, title) {
require(ggplot2)
data <- read.csv(x, header=F, stringsAsFactors=F)
ggplot(data, aes(x=1:nrow(data), y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1, alpha=1/20) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency")
}
gen_req(ttfPath, "Total Term Frequency vs Rank")
ttfPath <- "Suggie  Request/mp3Excel.csv"
gen_req(ttfPath, "Total Term Frequency vs Rank")
gen_req(ttfPath, "Total Term Frequency vs Rank")
dat <- read.csv(ttfPath, header=F, stringsAsFactors=F)
dat
head(dat)
ggplot(dat, aes(x=1:nrow(data), y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1, alpha=1/20) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency")
str(dat)
rownames(dat)
dat$rank <- 1:nrow(dat)
gen_req <- function(x, title) {
require(ggplot2)
data <- read.csv(x, header=F, stringsAsFactors=F)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=1:nrow(data), y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1, alpha=1/20) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency")
}
gen_req(ttfPath, "Total Term Frequency vs Rank")
gen_req <- function(x, title) {
require(ggplot2)
data <- read.csv(x, header=F, stringsAsFactors=F)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=rank, y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1, alpha=1/20) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency")
}
gen_req(ttfPath, "Total Term Frequency vs Rank")
ttfPath <- "Suggie  Request/mp3Excel.csv"
dfPath <- "Suggie  Request/mp4Excel.csv"
gen_req <- function(x, title) {
require(ggplot2)
data <- read.csv(x, header=F, stringsAsFactors=F)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=rank, y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1, alpha=1/5) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency")
}
gen_req(ttfPath, "Total Term Frequency vs Rank")
gen_req <- function(x, title) {
require(ggplot2)
data <- read.csv(x, header=F, stringsAsFactors=F)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=rank, y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency")
}
gen_req(ttfPath)
gen_req(ttfPath, "Total Term Frequency vs Rank")
gen_req
gen_req <- function(x, title) {
require(ggplot2)
data <- read.csv(x, header=F, stringsAsFactors=F)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=rank, y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency") +
geom_line(method="lm")
}
gen_req(dfPath, "Total Term Frequency vs Rank")
?geom_smooth
gen_req <- function(x, title) {
require(ggplot2)
data <- read.csv(x, header=F, stringsAsFactors=F)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=rank, y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency") +
geom_smooth(method="lm")
}
gen_req(dfPath, "Document Frequency vs Rank")
gen_req(ttfPath, "Total Term Frequency vs Rank")
gen_req(ttfPath, "Total Term Frequency vs Rank")
ttfPath <- read.csv("Suggie  Request/mp3Excel.csv", header=F, stringAsFactors=F)
?read.csv
ttfPath <- read.csv("Suggie  Request/mp3Excel.csv", header=F, stringsAsFactors=F)
dfPath <- read.csv("Suggie  Request/mp4Excel.csv", header=F, stringsAsFactors=F)
gen_req(ttfPath, "Total Term Frequency vs Rank")
gen_req <- function(data, title) {
require(ggplot2)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=rank, y=V2)) +
scale_x_log10() +
scale_y_log10() +
geom_point(shape=1) +
ggtitle(title) +
xlab("Rank") +
ylab("Frequency") +
geom_smooth(method="lm")
}
gen_req(ttfPath, "Total Term Frequency vs Rank")
gen_req2 <- function(data, title) {
require(ggplot2)
data$rank <- 1:nrow(data)
ggplot(data, aes(x=log(rank), y=log(V2))) +
geom_point(shape=1) +
ggtitle(title) +
xlab("Log of Rank") +
ylab("Log of Frequency") +
geom_smooth(method="lm")
}
gen_req2(ttfPath, "Log TTF vs log Rank")
gen_req(ttfPath, "Total Term Frequency vs Rank")
lm(V2 ~ 1:nrow(data), data)
data
lm(V2 ~ 1:nrow(ttfPath), ttfPath)
los,(kkyRakj)
nrow(ttfPath)
length(ttfPath$V2)
ttfPath$Rank <- 1:nrow(ttfPath)
lm(V2 ~ rank, ttfPath)
lm(V2 ~ Rank, ttfPath)
lm(log(V2) ~ log(Rank), ttfPath)
dfPath$Rank <- 1:nrow(dfPath)
lm(log(V2) ~ log(Rank), dfPath)
getwd()
ttfPath <- read.csv("Suggie  Request/mp3Excel.csv", header=F, stringsAsFactors=F)
dfPath <- read.csv("Suggie  Request/mp4Excel.csv", header=F, stringsAsFactors=F)
summary(lm(log(V2) ~ log(Rank), ttfPath))
ttfPath$Rank <- 1:nrow(ttfPath)
summary(lm(log(V2) ~ log(Rank), ttfPath))
dfPath$Rank <- 1:nrow(dfPath)
summary(lm(log(V2) ~ log(Rank), dfPath))
load("PrevBedsDxPx.RData")
load("PatsbedsDxPx.RData")
load("Infectious Disease Project/PrevShiny App/PatsbedsDxPx.RData")
shiny::runApp('Infectious Disease Project/PrevShiny App')
library(shiny)
install.packages("digest")
library(digest)
library(shiny)
shiny::runApp('Infectious Disease Project/PrevShiny App')
install.packages("data.table")
library(data.table)
shiny::runApp('Infectious Disease Project/PrevShiny App')
install.packages("colorspace")
shiny::runApp('Infectious Disease Project/PrevShiny App')
install.packages("shiny")
install.packages("shiny")
shiny::runApp('Infectious Disease Project/PrevShiny App')
?eventReactive
shiny::runApp('Infectious Disease Project/PrevShiny App')
shiny::runApp('Infectious Disease Project/PrevShiny App')
beds[PID==0]
nrow(beds[PID==0])
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
shiny::runApp('Infectious Disease Project/PrevShiny App')
patientTimeline(1, event.line=T)
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
patientTimeline(1, event.line=T)
shiny::runApp('Infectious Disease Project/PrevShiny App')
Dx
Px
Dx
Yx
Px
Yx
Px
Dx
Px
shiny::runApp('Infectious Disease Project/PrevShiny App')
shiny::runApp('Infectious Disease Project/PrevShiny App')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
Dx
Dx[PID==1]
Dx[PID==1]
Dx[PID==1][,.(Value=Dxdate, Label=1:length(PID), Group=factor("Diagnosis"))]
patients
Dx[PID==1][,.(Value=Dxdate, Label=1:length(PID), Group=factor("Diagnosis"))]
Dx[PID==1][,.(PID, Value=Dxdate, Label=1:length(PID), Group=factor("Diagnosis"))]
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
patientTimeline(1, event.line=T)
patientTimeline(1, event.line=T, diag=T)
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
patientTimeline(1, event.line=T, diag=T)
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
patientTimeline(1, event.line=T, diag=T)
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
Px
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
patientTimeline(1, event.line=T, diag=T, treat=T)
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
shiny::runApp('Infectious Disease Project/PrevShiny App')
Px
Px[PID==2]
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/Infectious Disease Project/methods.R')
shiny::runApp('Infectious Disease Project/PrevShiny App')
patientTimeline
library(shiny)
serverShouldWork <- function(input, output) {
output$bTable <- renderTable({iris}, caption=paste("test"),
caption.placement = getOption("xtable.caption.placement", "top"),
caption.width = getOption("xtable.caption.width", NULL)
)
}
serverDoesWork <- function(input, output) {
output$bTable <- renderTable({iris}, caption="test")
}
ui <- fluidPage("RenderTable Example",
tableOutput("bTable") #table of information on beds (beds)
)
app1 <- shinyApp(ui, serverDoesWork)
app2 <- shinyApp(ui, serverShouldWork)
runApp(app1)
source("SYS 3060/Assign 3/methods.R")
# num 8 -----------------------------------------------------------------
# num 8.1
d.8.00 = 0
d.8.10 = 7000
d.8.11 = 8000
d.8.01 = 20000
g = 585/1300
D.0 = d.8.00*(1-g) + d.8.01*g
D.1 = d.8.10*(1-g) + d.8.11*g
# num 8.2
r.8 = (d.8.01 - d.8.11)/(d.8.10 - d.8.00)
p.8 = 1/(1+r.8)
oldGrph <- getCalib8()
oldGrph + geom_vline(aes(xintercept=g, colour="red"))
# num 8.3
preds <- data.table(
Predicted.Probability=c(0.6, 0.2, 0.8, 0.9, 0.4, 0.2, 0.7))
library(xtable)
xtable(data.frame(c("Due Date:", "Submission Date:"), c("March 18, 2015")))
8/900
1/90
1/90 * 0.8
0.5/(0.5+0.75)
0.9/(0.9+0.75)
1.3/(1.3+0.75)
9/20
9/20*0.4
9/8
9/20/0.4
3/2
D.0
D.1
r.8
p.*
e
p.8
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/SYS 3060/Assign 3/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/SYS 3060/Assign 3/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/SYS 3060/Assign 3/methods.R')
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/SYS 3060/Assign 3/methods.R')
oldGrph <- getCalib8()
oldGrph <- getCalib8()
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/SYS 3060/Assign 3/methods.R')
oldGrph
source('C:/Users/cheta_000/Dropbox/College/3_Third Year/06_Sixth Semester/R Working Directory/SYS 3060/Assign 3/methods.R')
oldGrph + geom_line()
?geom_line
oldGrph + geom_line(aes(color=NULL))
1+1
test <- 1
function() {
test <- 2
}
tst <- function() {
test <- 2
}
tst()
print(test)
testValue <- 1
testFunc <- function() {
testValue <- 2
}
testFunc()
print(testValue)
testValue <- 1
print(testValue)
testFunc <- function() {
testValue <- 2
}
testFunc()
print(testValue)
?read.table
chartOutput <- scan("../CS 6501/MP2/MP2/data/chartOutput.txt")
chartOutput <- scan("../CS 6501/MP2/MP2/data/chartOutput.txt")
?peek
chartOutput <- scan("../CS 6501/MP2/MP2/data/chartOutput.txt")
chartOutput <- scan("../CS 6501/MP2/MP2/data/chartOutput.txt", sep=",")
head(chartOutput)
library(data.table)
shiny::runApp('Infectious Disease Project/PrevShiny App')
cleanedPatPath <-
"O:/clinlabs/Microbio/CRE Environmental/cleaned KPC patient data//PatsbedsDxPx.RData"
prevPatPath <-
"O:/clinlabs/Microbio/CRE Environmental/cleaned KPC patient data//PrevBedsDxPx.RData"
if(file.exists(cleanedPatPath))
load(cleanedPatPath)
if(file.exists(prevPatPath))
load(prevPatPath)
shiny::runApp('Infectious Disease Project/PrevShiny App')
shiny::runApp('Infectious Disease Project/OverTime Transmission App/')
getwd()
setwd("Dropbox/College/3_Third Year/06_Sixth Semester/CS 6501/Course Project/")
getwd()
setwd("../CS 6501/Course Project/")
# setwd("../../R Working Directory/")
# setwd("Dropbox/College/3_Third Year/06_Sixth Semester/CS 6501/Course Project/")
source("BushData-CleaningMethods.R")
bushDocFileNames <- paste0("data/Bush Docs/", list.files("data/Bush Docs")[
str_detect(list.files("data/Bush Docs"),"doc-pg")])
cl <- makeCluster(mc <- getOption("cl.cores", 4))
clusterEvalQ(cl, {source("BushData-CleaningMethods.R")})
docsDT <- rbindlist(lapply(bushDocFileNames, readFile))
fileNums <- nrow(docsDT)
docsList <- list(
docsDT[1:floor(fileNums/4), Content],
docsDT[ceiling(fileNums/4):floor(fileNums/2), Content],
docsDT[ceiling(fileNums/2):floor(3*fileNums/4), Content],
docsDT[ceiling(3*fileNums/4):fileNums, Content])
tdm <- parLapply(cl, docsList, genTdm)
tdms <- c(tdm[[1]], tdm[[2]], tdm[[3]], tdm[[4]])
# rm(tdm, docsList, docsDT)
dtm <- pruneWords(tdms)
system.time(
ldasGibbs <- parLapply(cl, seq(200, 400, by=100), LDA, method="Gibbs", x=dtm)
)
clusterExport("dtm")
clusterExport(list("dtm"))
?clusterExport
clusterExport(cl, list("dtm"))
system.time(
ldasGibbs <- parLapply(cl, seq(200, 400, by=100),
function(x) LDA(k=x, method="Gibbs", x=dtm))
)
61543/60/60
save(ldasGibbs, file="LDAGibbs")
perplex(ldasGibbs[[1]])
perplexity(ldasGibbs[[1]])
?perplexity
class(ldaGibbs[[1]])
class(ldasGibbs[[1]])
ldasGibbs
class(ldasGibbs)
class(ldasGibbs[[1]])
perplexity(ldasGibbs[[1]])
perplexity(lda.100)
load("lda100.RData")
perplexity(lda.100)
perplexity(ldasGibbs[[1]])
class(lda.100)
class(ldasGibbs[[1]])
class(ldasGibbs)
perplexity(ldasGibbs)
logLik
?logLik
clusterExport(cl, list("dtm"))
stopCluster(cl)
bushDocFileNames[[1]]
readFile(bushDocFileNames[[1]])
